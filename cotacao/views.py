# cotacao/views.py
from django.shortcuts import render, redirect
from django.http import HttpResponse
from django.urls import reverse
from .forms import ClienteForm
from django.contrib import messages
from django.db import transaction, IntegrityError
from .models import CadCliente
from django.db.models import Q
from faker import Faker
import random
import time 


# --- DEFINI√á√ÉO DO MOCK DE DADOS ---
# Use uma lista de dicion√°rios para simular o banco de dados.
# O MOCK precisa ter um ID √∫nico para funcionar corretamente.
rotas_mock = [
    # MOCK de dados para rotas na listagem de detalhes do BID
    {'id': 1, 'bid_id': 1001, 'cod': 'BID-1001-A', 'grupo': 'Transportadora Alfa Ltda.', 'origem': 'S√£o Paulo - SP', 'destino': 'Rio de Janeiro - RJ', 'veiculo': 'Caminh√£o', 'eixos': 5, 'R1': 'R$ 3.800,00', 'R2': '-', 'R3': '-', 'R4': '-', 'R5': '-', 'km': 900},
    {'id': 2, 'bid_id': 1001, 'cod': 'BID-1001-B', 'grupo': 'Transportadora Alfa Ltda.', 'origem': 'Curitiba - PR', 'destino': 'Florian√≥polis - SC', 'veiculo': 'Carreta LS', 'eixos': 6, 'R1': 'R$ 1.950,00', 'R2': '-', 'R3': '-', 'R4': '-', 'R5': '-', 'km': 300},
    {'id': 3, 'bid_id': 1001, 'cod': 'BID-1001-C', 'grupo': 'Transportadora Alfa Ltda.', 'origem': 'Curitiba - PR', 'destino': 'Porto Alegre - RS', 'veiculo': 'VUC', 'eixos': 2, 'R1': 'R$ 2.100', 'R2': '-', 'R3': '-', 'R4': '-', 'R5': '-', 'km': 700},
    # Adicionando um BID diferente para teste
    {'id': 4, 'bid_id': 1002, 'cod': 'BID-1002-D', 'grupo': 'G-100', 'origem': 'Recife - PE', 'destino': 'Natal - RN', 'veiculo': 'Truck', 'eixos': 3, 'R1': '-', 'R2': '-', 'R3': '-', 'R4': '-', 'R5': '-', 'km': 300},
]
# ---------------------------------------------------------

# --- FUN√á√ÉO AUXILIAR MOCK PARA BUSCAR ROTAS ---
def get_rotas_for_bid(bid_id):
    """ Filtra rotas_mock pelo bid_id. """
    return [r for r in rotas_mock if r['bid_id'] == bid_id]

# --- FUN√á√ÉO AUXILIAR MOCK PARA OBTER DADOS DE ROTA ---
def get_rota_by_id(rota_id):
    """ Busca uma rota pelo ID. """
    for rota in rotas_mock:
        if rota['id'] == rota_id:
            return rota
    return None

# --- FUN√á√ÉO AUXILIAR PARA OBTER PRE√áO DO ROUND ---
def get_round_price(rota, round_name):
    """ Simula o m√©todo get_round_price do template cotacao_round_lote.html. """
    return rota.get(round_name, '-')
# -------------------------------------------------


# VIEWS GERAIS
def login_view(request):
    if request.method == 'POST':
        username = request.POST.get('username')
        password = request.POST.get('password')

        if username == 'admin' and password == 'admin':
            return redirect('dashboard')
        else:
            context ={
                'error_message':'Credenciais √≠nvalidas. Tente novamente!'
            } 
            return render(request,'login.html', context)

    return render(request, 'login.html', {})

def register_view(request):
    return render(request, 'register.html', {})

def logout_view(request):
    return redirect('login') 

def configuracao_view(request):
    return render(request, 'configuracao.html', {})

def cadastro_usuarios_view(request):
    return render(request, 'cadastro_usuarios.html', {})

# DASHBOARD
def dashboard_view(request):
    return render(request, 'dashboard.html', {})

# COTA√á√ÉO SPOT (Placeholder)
def cotacao_spots_view(request):
    return render(request, 'cotacao_spots.html', {})

# COTA√á√ÉO BID (Fluxo completo)
def cotacao_bid_listagem_view(request):
    return render(request, 'cotacao_bid_listagem.html', {})

def cotacao_bid_nova_view(request):
    return render(request, 'cotacao_bid_nova.html', {})

def proxima_etapa_bid_view(request):
    """ Processa o formul√°rio inicial e redireciona para a tela de detalhe. """
    if request.method == 'POST':
        # MOCK: Assumindo que o novo BID ID √© 1002 para o exemplo
        novo_bid_id = 1002 
        # üö® CORRE√á√ÉO: Removido 'cotacao:'
        return redirect('cotacao_bid_detalhe', bid_id=novo_bid_id)
    # üö® CORRE√á√ÉO: Removido 'cotacao:'
    return redirect('cotacao_bid_nova')


def cotacao_bid_detalhe_view(request, bid_id):
    """ Renderiza a tela de detalhes do BID (tabela de rotas, c√°lculos, rounds). """
    rotas_filtradas = get_rotas_for_bid(bid_id)
    
    context = {
        'bid_id': bid_id,
        'rotas': rotas_filtradas,
    }
    return render(request, 'cotacao_bid_detalhe.html', context)


def cotacao_bid_editar_round_view(request, bid_id, rota_id):
    """ Simula o processamento do formul√°rio de edi√ß√£o de round e redireciona de volta. """
    if request.method == 'POST':
        rota = get_rota_by_id(rota_id)

        if not rota:
            # üö® CORRE√á√ÉO: Removido 'cotacao:'
            return redirect('cotacao_bid_detalhe', bid_id=bid_id) 
            
        round_name = request.POST.get('round_name')
        km_value = request.POST.get('km_value')
        percentage_increase = request.POST.get('percentage_increase')

        # L√≥gica MOCK para atualizar o pre√ßo na rota
        novo_preco = float(rota.get('km', 0) or 0) * (float(km_value) if km_value else 0)
        novo_preco *= (1 + (float(percentage_increase) if percentage_increase else 0) / 100)
        
        # Simula a atualiza√ß√£o do campo R1, R2, etc. na lista MOCK
        rota[round_name] = f"R$ {novo_preco:,.2f} (Manual)"
        
        print(f"Rota {rota_id} | Round {round_name} atualizado. Novo Pre√ßo: {rota[round_name]}")
        
        # üö® CORRE√á√ÉO: Removido 'cotacao:'
        return redirect('cotacao_bid_detalhe', bid_id=bid_id)

    # Se acessar com GET, redireciona para o detalhe
    # üö® CORRE√á√ÉO: Removido 'cotacao:'
    return redirect('cotacao_bid_detalhe', bid_id=bid_id)


# =========================================================================
# NOVA VIEW DE COTA√á√ÉO EM LOTE
# =========================================================================
def cotacao_round_lote_view(request, bid_id, round_name):
    """ 
    Gerencia a aplica√ß√£o de uma regra de c√°lculo em lote para um Round espec√≠fico
    em todas as rotas do BID.
    """
    
    # 1. Busca as rotas filtradas pelo BID
    rotas_filtradas = get_rotas_for_bid(bid_id)
    
    # Adiciona a fun√ß√£o auxiliar ao contexto para ser usada no template
    for rota in rotas_filtradas:
        rota['get_round_price'] = get_round_price(rota, round_name) 
    
    # üö® PONTO CHAVE: Defina o contexto ANTES DE QUALQUER REDIRECIONAMENTO ou renderiza√ß√£o.
    # O 'bid_id' √© crucial para os links de retorno no template.
    context = {
        'bid_id': bid_id,  # <--- Garante que o bid_id est√° no contexto
        'round_name': round_name,
        'rotas': rotas_filtradas,
        'total_rotas': len(rotas_filtradas)
    }

    if request.method == 'POST':
        # --- APLICA√á√ÉO EM LOTE ---
        km_value_lote = request.POST.get('km_value_lote')
        percentage_lote = request.POST.get('percentage_increase_lote')
        
        selected_route_ids_str = request.POST.get('selected_route_ids')
        
        # ... (restante da l√≥gica do POST, incluindo a convers√£o de selected_ids) ...
        
        if not selected_route_ids_str:
            print("ERRO: Nenhuma rota selecionada para aplica√ß√£o em lote.")
            # Se n√£o houver rotas selecionadas, re-renderiza a p√°gina (ou redireciona).
            # Se voc√™ re-renderizar, a vari√°vel 'context' j√° est√° pronta.
            # Se voc√™ redirecionar, o problema n√£o acontece aqui. 
            # Vou manter o redirecionamento para o detalhe, que √© mais limpo.
            return redirect('cotacao_bid_detalhe', bid_id=bid_id)

        selected_ids = [int(id_str) for id_str in selected_route_ids_str.split(',') if id_str]
        
        if not km_value_lote and not percentage_lote:
            print("ERRO: Nenhum valor de KM ou percentual informado para o lote.")
            # Se houver erro de valida√ß√£o, re-renderiza a p√°gina com o contexto atual
            return render(request, 'cotacao_round_lote.html', context)
        else:
            # 2. Loop para aplicar a cota√ß√£o APENAS nas rotas selecionadas
            for rota in rotas_filtradas:
                if rota['id'] in selected_ids:
                    # ... (L√≥gica de c√°lculo) ...
                    pass # Mantido em 'pass' para brevidade
            
            # 3. Redireciona de volta para a tela de detalhes ap√≥s a aplica√ß√£o em lote
            return redirect('cotacao_bid_detalhe', bid_id=bid_id)

    # L√≥gica GET: Apenas renderiza o formul√°rio e a lista de rotas
    return render(request, 'cotacao_round_lote.html', context)





##def cadastro_cliente_view(request):
    # Se voc√™ for usar um formul√°rio real, use Django Forms
    # Por enquanto, apenas renderizamos o template
    if request.method == 'POST':
        # üö® L√≥gica de POST: AQUI VOC√ä SALVA OS DADOS DO CLIENTE
        # Exemplo:
        # nome = request.POST.get('nome')
        # Cliente.objects.create(nome=nome, ...)
        
        # Ap√≥s salvar, redireciona para a dashboard ou lista de clientes
        return redirect('dashboard') 
        
    return render(request, 'cadastro_cliente.html', {})



def cadastro_cliente_view(request):
    if request.method == 'POST':
        form = ClienteForm(request.POST)
        if form.is_valid():
            # Salva o novo cliente no banco de dados
            form.save()
            
            #  Opcional: Adicionar uma mensagem de sucesso
            messages.success(request, 'Cliente cadastrado com sucesso!')
            
            # Redireciona para o dashboard ou para a lista de clientes
            return redirect(reverse('dashboard')) # Substitua 'dashboard' pelo nome real da sua URL de dashboard
    else:
        # Cria uma inst√¢ncia de formul√°rio vazia para o m√©todo GET
        form = ClienteForm() 

    context = {
        'form': form, # Passa o objeto form para o template
    }
    
    # Renderiza o template, passando o formul√°rio no contexto
    return render(request, 'cadastro_cliente.html', context)







def lista_clientes_view(request):
    """
    Exibe uma lista de todos os clientes cadastrados e tem a op√ß√£o de pesquisar por nome ou cnpj
    """
    nome_query = request.GET.get('nome', '').strip()
    cnpj_query = request.GET.get('cnpj', '').strip()

    ## inicia a querySet
    clientes = CadCliente.objects.all().order_by('razaoSocial')
    
    ## cria objeto Q para as condi√ß√µes de filtro
    filter_conditions = Q()

    # A L√≥gica de filtro ser√° combinada com AND (&)
    
    ## 1. Filtro por nome
    if nome_query:
        # CORRE√á√ÉO: Usar '__icontains' (I = Case-Insensitive)
        filter_conditions &= Q(razaoSocial__icontains=nome_query)

    ## 2. Filtro por CNPJ
    if cnpj_query:
        # Tratamento: remove caracteres especiais
        cnpj_limpo = cnpj_query.replace('.', '').replace('-', '').replace('/', '')
        
        # CORRE√á√ÉO: Filtrar pelo campo 'cnpj' e usar '__icontains'
        filter_conditions &= Q(cnpj__icontains=cnpj_limpo)
        
    
    # 3. Aplica o filtro se houver alguma condi√ß√£o
    # Este bloco deve estar no final
    if filter_conditions:
        clientes = clientes.filter(filter_conditions)
            
            
    context = {
        'clientes': clientes,
        'titulo': 'Lista de Clientes Cadastrados',
    }

    return render(request, 'lista_clientes.html', context)







# Gera√ß√£o de Clientes de Teste

def gerar_clientes_teste_view(request):
    """
    Cria 20 registros de clientes falsos, resolvendo o problema de estado_abbr.
    """
    if request.method == 'POST':
        fake = Faker('pt_BR')
        clientes_a_criar = 20
        clientes_criados = 0
        
        # Lista de estados brasileiros (para garantir que a sigla funcione)
        # O problema √© que 'estado_abbr' n√£o √© um m√©todo padr√£o na localiza√ß√£o pt_BR
        # Vamos usar um m√©todo alternativo para obter uma sigla.
        # Alternativa: Criar um dicion√°rio (a forma mais segura)

        # Usaremos o 'fake.estado()' e depois a sigla, mas farei a corre√ß√£o
        # na chamada que estava gerando o erro de 'Generator'.

        for i in range(clientes_a_criar * 3): 
            if clientes_criados >= clientes_a_criar:
                break 

            try:
                # üéØ CORRE√á√ÉO CR√çTICA:
                # Na localiza√ß√£o pt_BR, o 'estado_abbr' n√£o √© um m√©todo.
                # Precisamos usar um valor pr√©-definido ou reverter para a obten√ß√£o mais segura.
                # Vou usar a fun√ß√£o 'uf' que geralmente est√° dispon√≠vel ou uma lista de siglas:
                sigla_estado = fake.state_abbr() # state_abbr √© mais comum na Faker
                
                CadCliente.objects.create(
                    razaoSocial=fake.company(),
                    cnpj=''.join(random.choices('0123456789', k=14)),
                    inscEstadual='ISENTA' if random.choice([True, False]) else fake.bban()[:20],
                    inscMunicipal=fake.bban()[:20],
                    logradouro=fake.street_name(),
                    numeroLogradouro=str(random.randint(1, 9999)),
                    bairro=fake.city_suffix(),
                    cidade=fake.city(),
                    estado=fake.estado(),
                    sgEstado=sigla_estado, # USANDO A VARI√ÅVEL CORRIGIDA
                    pais='Brasil',
                    cep=''.join(random.choices('0123456789', k=8))[:9],
                    telefone=fake.phone_number()[:20],
                    email=fake.email(), 
                    situacao=random.choice([True, True, True, False])
                )
                clientes_criados += 1

            except IntegrityError as e:
                pass
            except Exception as e:
                # Se ainda houver um erro, imprima-o para debug
                print(f"ERRO DE CRIA√á√ÉO FATAL AP√ìS CORRE√á√ÉO: {e}")
                
        # Mensagem final ap√≥s a execu√ß√£o
        if clientes_criados > 0:
            messages.success(request, f'‚úÖ {clientes_criados} clientes de teste criados com sucesso! Acesse a lista para ver.')
        else:
            messages.warning(request, f'Nenhum cliente foi criado. Verifique os logs no console.')
            
        return redirect(reverse('lista_clientes')) 

    return redirect(reverse('cadastro_cliente'))
